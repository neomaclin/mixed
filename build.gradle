buildscript {
    repositories {
        mavenCentral()
        jcenter()
        google()

    }
}

plugins {
    id 'idea'
    id 'java'
    id 'scala'
    id 'groovy'
    id "nebula.clojure" version "9.1.0"
    id "org.jetbrains.kotlin.jvm" version "1.3.50"
    id 'application'
    id "me.champeau.gradle.jmh" version "0.5.0-rc-2"
}

mainClassName = "org.demo.core.Main"

sourceSets {
    main {
        java.srcDirs = ['src/main/java']
        kotlin.srcDirs += ['src/main/kotlin', 'src/main/java', 'src/main/clojure']
        groovy.srcDirs += ['src/main/groovy', 'src/main/java', 'src/main/clojure']
        clojure.srcDirs += ['src/main/clojure', 'src/main/java']
        scala.srcDirs += ['src/main/scala', 'src/main/java']
    }

}

def classes = [compileKotlin.destinationDir, compileClojure.destinationDir, compileGroovy.destinationDir]

compileScala.classpath += files(classes)
compileScala.scalaCompileOptions.additionalParameters = ["-Ywarn-dead-code", "-feature",
                                                         "-language:existentials",
                                                         "-language:implicitConversions",
                                                         "-language:higherKinds",
                                                         "-language:postfixOps"]

task(compile) {
    compileScala
}

group 'org.demo.mixed'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    jcenter()
    google()
}

ext {
    scalaVersion = "2.13"
    akkaVersion = "2.5.25"
    catsVersion = "2.0.0"
    naming = { "${it}_${scalaVersion}" }
    naming12 = { "${it}_2.12" }
    circeVersion = "0.12.1"

}


dependencies {

    implementation 'org.clojure:clojure:1.10.1'
    implementation 'org.scala-lang:scala-library:2.13.1'
    implementation 'org.codehaus.groovy:groovy-all:2.5.8'
    implementation 'com.netflix.servo:servo-core:0.12.17'

   implementation(
           ['spark-core', 'spark-sql'].collect {
               [group: 'org.apache.spark', name: naming12(it), version: '2.4.4']
           }
   )


    implementation "com.chuusai:shapeless_${scalaVersion}:2.3.3"

    implementation(
            ['cats-core',
             'cats-free',
             'cats-effect',
             'kittens'].collect {
                [group: 'org.typelevel', name: naming(it), version: catsVersion]
            }
    )

    implementation "io.monix:monix_${scalaVersion}:3.0.0"

    implementation( //zio
            [group: 'dev.zio', name: 'zio_' + scalaVersion, version: '1.0.0-RC15'],
            //[group: 'dev.zio', name: 'zio-interop-cats' + '_' + scalaVersion, version: '2.0.0.0-RC4'],
            //[group: 'dev.zio', name: 'zio-interop-monix' + '_' + scalaVersion, version: 'v3.0.0.0-RC6']
    )


    implementation(
            ['fs2-core',
             'fs2-io'].collect {
                [group: 'co.fs2', name: naming(it), version: '2.0.1']
            }
    )


    implementation( // Akka
            ['akka-actor',
             'akka-stream',
             'akka-cluster-sharding',
             'akka-cluster-metrics',
             'akka-cluster-tools',
             'akka-distributed-data',
             'akka-persistence',
             'akka-persistence-query'].collect {
                [group: 'com.typesafe.akka', name: naming(it), version: akkaVersion]
            }

    )


    implementation( //akka-http
            [group: 'com.typesafe.akka', name: "akka-http_2.13", version: "10.1.10"],
            [group: 'de.heikoseeberger', name: "akka-http-circe_2.13", version: "1.28.0"],
    )
    implementation( //Json lib
            ["circe-core", "circe-generic", "circe-parser"].collect {
                [group: "io.circe", name: naming(it), version: circeVersion]
            }
    )

    implementation "org.postgresql:postgresql:42.2.8"
    //implementation "io.getquill:quill-jdbc_2.12:3.4.9"
    implementation group: "com.47deg", name: "fetch_2.12", version: "1.2.0"
    implementation group: 'redis.clients', name: 'jedis', version: '3.1.0'

    testImplementation( //Akka Testing
            ['akka-testkit',
             'akka-stream-testkit',
             'akka-multi-node-testkit'].collect {
                [group: 'com.typesafe.akka', name: naming(it), version: akkaVersion]
            }
    )

    testImplementation( //Junit
            [group: "org.testng", name: "testng", version: "7.0.0"],
            [group: "net.aichler", name: "jupiter-interface", version: "0.8.2"],
            [group: "org.junit.jupiter", name: "junit-jupiter-engine", version: "5.5.2"]
    )

    testImplementation( //Validation
            [group: "org.scalacheck", name: "scalacheck_" + scalaVersion, version: "1.14.0"],
            [group: "org.scalatest", name: "scalatest_" + scalaVersion, version: "3.0.8"],
            [group: "org.scalamock", name: "scalamock_" + scalaVersion, version: "4.4.0"],
            [group: "com.storm-enroute", name: "scalameter_" + scalaVersion, version: "0.19"],
            [group: "com.github.alexarchambault", name: "scalacheck-shapeless_1.14_" + scalaVersion, version: "1.2.3"]
    )

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    implementation(
            ['jmh-core',
             'jmh-core-benchmarks',
             'jmh-generator-annprocess'].collect {
                [group: 'org.openjdk.jmh', name: it, version: '1.21']
            }
    )
}

